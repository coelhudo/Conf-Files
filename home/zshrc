#!/bin/zsh

export ZSH_CUSTOM=~/.local/zsh/

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt autocd notify correct promptsubst
unsetopt appendhistory beep
setopt histignorespace
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '~/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall

autoload -U select-word-style
select-word-style bash

eval $(dircolors $ZSH_CUSTOM/dircolors/dircolors)

plugins=(git zsh-autosuggestions zsh-completions zsh-syntax-highlighting)

for plugin in $plugins;
do
  if [ -e $ZSH_CUSTOM/plugins/ ] && [ -e $ZSH_CUSTOM/plugins/$plugin ];
  then
     source $ZSH_CUSTOM/plugins/$plugin/$plugin.zsh
  fi
done

autoload -Uz promptinit
promptinit

autoload bashcompinit
bashcompinit

#autoload -U colors
#colors

#source $ZSH_CUSTOM/themes/awesomepanda.zsh-theme

export FOAM_INST_DIR=~/.local/opt/openfoam/OpenFOAM-v1906
alias ofoam="source ${FOAM_INST_DIR}/OpenFOAM-5.0/etc/bashrc"

export PATH=$PATH:~/.opam/default/bin:~/.local/bin:~/.cabal/bin

if [ ! -S ~/.ssh/ssh_auth_sock ]; then
  eval `ssh-agent`
  ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
fi
export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
ssh-add -l > /dev/null || ssh-add

if [ ! -S ~/.gnupg/gnupg_auth_sock ]; then
  eval $( gpg-agent --daemon --options ~/.gnupg/gpg-agent.conf )
  ln -sf "$SSH_AUTH_SOCK" ~/.gnupg/gnupg_auth_sock
fi
export SSH_AUTH_SOCK=~/.gnupg/gnupg_auth_sock

GPG_TTY=$(tty)
export GPG_TTY

export LESS='-R'

function git_prompt_info() {
  ref=$(git symbolic-ref HEAD 2> /dev/null)
  if [[ -n $ref ]];
  then
      local STATUS
      local -a FLAGS
      FLAGS=('--porcelain')
      if [[ "$DISABLE_UNTRACKED_FILES_DIRTY" == "true" ]]; then
	  FLAGS+='--untracked-files=no'
      fi
      STATUS=$(command git status ${FLAGS} 2> /dev/null | tail -n1)
      local status
      git_status="✓"
      if [[ -n $STATUS ]]; then
	  git_status="✗"
      fi

      echo "%F{yellow}‹${ref#refs/heads/} ${git_status}› %f"
  fi
}

local git_branch='$(git_prompt_info)'
local git_dirty='$(parse_git_dirty)'
export PROMPT="%F{green}%n@%m%f %F{blue}%3~%f ${git_branch}
%F{yellow}%#%f "
export RPROMPT='%B%(?..%F{red}%? ↵%f)%b'

export PATH="/home/coelho/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

PATH="/home/coelho/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/home/coelho/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/coelho/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
#PERL_MB_OPT="--install_base \"/home/coelho/perl5\""; export PERL_MB_OPT;
#PERL_MM_OPT="INSTALL_BASE=/home/coelho/perl5"; export PERL_MM_OPT;

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
